// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opentelemetry/proto/collector/discovery/v1/discovery_service.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "go.opentelemetry.io/collector/pdata/internal/data/protogen/discovery/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExportDiscoveryServiceRequest struct {
	ResourceDiscovery    []*v1.ResourceDiscovery `protobuf:"bytes,1,rep,name=resource_discovery,json=resourceDiscovery,proto3" json:"resource_discovery,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ExportDiscoveryServiceRequest) Reset()         { *m = ExportDiscoveryServiceRequest{} }
func (m *ExportDiscoveryServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ExportDiscoveryServiceRequest) ProtoMessage()    {}
func (*ExportDiscoveryServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0529d96885687262, []int{0}
}
func (m *ExportDiscoveryServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportDiscoveryServiceRequest.Unmarshal(m, b)
}
func (m *ExportDiscoveryServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportDiscoveryServiceRequest.Marshal(b, m, deterministic)
}
func (m *ExportDiscoveryServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportDiscoveryServiceRequest.Merge(m, src)
}
func (m *ExportDiscoveryServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ExportDiscoveryServiceRequest.Size(m)
}
func (m *ExportDiscoveryServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportDiscoveryServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExportDiscoveryServiceRequest proto.InternalMessageInfo

func (m *ExportDiscoveryServiceRequest) GetResourceDiscovery() []*v1.ResourceDiscovery {
	if m != nil {
		return m.ResourceDiscovery
	}
	return nil
}

type ExportDiscoveryServiceResponse struct {
	// The details of a partially successful export request.
	//
	// If the request is only partially accepted
	// (i.e. when the server accepts only parts of the data and rejects the rest)
	// the server MUST initialize the `partial_success` field and MUST
	// set the `rejected_<signal>` with the number of items it rejected.
	//
	// Servers MAY also make use of the `partial_success` field to convey
	// warnings/suggestions to senders even when the request was fully accepted.
	// In such cases, the `rejected_<signal>` MUST have a value of `0` and
	// the `error_message` MUST be non-empty.
	//
	// A `partial_success` message with an empty value (rejected_<signal> = 0 and
	// `error_message` = "") is equivalent to it not being set/present. Senders
	// SHOULD interpret it the same way as in the full success case.
	PartialSuccess       *ExportDiscoveryPartialSuccess `protobuf:"bytes,1,opt,name=partial_success,json=partialSuccess,proto3" json:"partial_success,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ExportDiscoveryServiceResponse) Reset()         { *m = ExportDiscoveryServiceResponse{} }
func (m *ExportDiscoveryServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ExportDiscoveryServiceResponse) ProtoMessage()    {}
func (*ExportDiscoveryServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0529d96885687262, []int{1}
}
func (m *ExportDiscoveryServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportDiscoveryServiceResponse.Unmarshal(m, b)
}
func (m *ExportDiscoveryServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportDiscoveryServiceResponse.Marshal(b, m, deterministic)
}
func (m *ExportDiscoveryServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportDiscoveryServiceResponse.Merge(m, src)
}
func (m *ExportDiscoveryServiceResponse) XXX_Size() int {
	return xxx_messageInfo_ExportDiscoveryServiceResponse.Size(m)
}
func (m *ExportDiscoveryServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportDiscoveryServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExportDiscoveryServiceResponse proto.InternalMessageInfo

func (m *ExportDiscoveryServiceResponse) GetPartialSuccess() *ExportDiscoveryPartialSuccess {
	if m != nil {
		return m.PartialSuccess
	}
	return nil
}

type ExportDiscoveryPartialSuccess struct {
	// The number of rejected discovery records.
	//
	// A `rejected_<signal>` field holding a `0` value indicates that the
	// request was fully accepted.
	RejectedDiscoveryRecords int64 `protobuf:"varint,1,opt,name=rejected_discovery_records,json=rejectedDiscoveryRecords,proto3" json:"rejected_discovery_records,omitempty"`
	// A developer-facing human-readable message in English. It should be used
	// either to explain why the server rejected parts of the data during a partial
	// success or to convey warnings/suggestions during a full success. The message
	// should offer guidance on how users can address such issues.
	//
	// error_message is an optional field. An error_message with an empty value
	// is equivalent to it not being set.
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportDiscoveryPartialSuccess) Reset()         { *m = ExportDiscoveryPartialSuccess{} }
func (m *ExportDiscoveryPartialSuccess) String() string { return proto.CompactTextString(m) }
func (*ExportDiscoveryPartialSuccess) ProtoMessage()    {}
func (*ExportDiscoveryPartialSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_0529d96885687262, []int{2}
}
func (m *ExportDiscoveryPartialSuccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportDiscoveryPartialSuccess.Unmarshal(m, b)
}
func (m *ExportDiscoveryPartialSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportDiscoveryPartialSuccess.Marshal(b, m, deterministic)
}
func (m *ExportDiscoveryPartialSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportDiscoveryPartialSuccess.Merge(m, src)
}
func (m *ExportDiscoveryPartialSuccess) XXX_Size() int {
	return xxx_messageInfo_ExportDiscoveryPartialSuccess.Size(m)
}
func (m *ExportDiscoveryPartialSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportDiscoveryPartialSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_ExportDiscoveryPartialSuccess proto.InternalMessageInfo

func (m *ExportDiscoveryPartialSuccess) GetRejectedDiscoveryRecords() int64 {
	if m != nil {
		return m.RejectedDiscoveryRecords
	}
	return 0
}

func (m *ExportDiscoveryPartialSuccess) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*ExportDiscoveryServiceRequest)(nil), "opentelemetry.proto.collector.discovery.v1.ExportDiscoveryServiceRequest")
	proto.RegisterType((*ExportDiscoveryServiceResponse)(nil), "opentelemetry.proto.collector.discovery.v1.ExportDiscoveryServiceResponse")
	proto.RegisterType((*ExportDiscoveryPartialSuccess)(nil), "opentelemetry.proto.collector.discovery.v1.ExportDiscoveryPartialSuccess")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/collector/discovery/v1/discovery_service.proto", fileDescriptor_0529d96885687262)
}

var fileDescriptor_0529d96885687262 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x9d, 0x16, 0x0a, 0x4e, 0xeb, 0xdf, 0x80, 0x10, 0x0a, 0x4a, 0x89, 0x9b, 0x52, 0x70,
	0x62, 0xdb, 0xad, 0xab, 0xaa, 0x0b, 0x05, 0xb1, 0xa4, 0xe2, 0xc2, 0x4d, 0x68, 0xa7, 0x17, 0x89,
	0xa4, 0x9d, 0x78, 0x67, 0x1a, 0xec, 0xd6, 0xbe, 0x82, 0x2f, 0xe0, 0xd6, 0x07, 0xf0, 0xf9, 0xc4,
	0x8c, 0x9d, 0x36, 0xb1, 0x82, 0xa2, 0xcb, 0xb9, 0x73, 0xcf, 0x77, 0x4e, 0xce, 0x84, 0x76, 0x64,
	0x0c, 0x63, 0x0d, 0x11, 0x8c, 0x40, 0xe3, 0xd4, 0x8b, 0x51, 0x6a, 0xe9, 0x09, 0x19, 0x45, 0x20,
	0xb4, 0x44, 0x6f, 0x18, 0x2a, 0x21, 0x13, 0xc0, 0xa9, 0x97, 0x34, 0x17, 0x87, 0x40, 0x01, 0x26,
	0xa1, 0x00, 0x9e, 0xae, 0xb3, 0x46, 0x86, 0x61, 0x86, 0xdc, 0x32, 0xb8, 0x95, 0xf1, 0xa4, 0x59,
	0x3d, 0x5a, 0xe5, 0xb7, 0xda, 0xc5, 0x80, 0xdc, 0x19, 0xa1, 0x7b, 0x67, 0x8f, 0xb1, 0x44, 0x7d,
	0x3a, 0xbf, 0xe9, 0x19, 0x7b, 0x1f, 0x1e, 0x26, 0xa0, 0x34, 0x1b, 0x50, 0x86, 0xa0, 0xe4, 0x04,
	0x05, 0x04, 0x56, 0xed, 0x90, 0x5a, 0xb1, 0x5e, 0x6e, 0xb5, 0xf9, 0xaa, 0x70, 0xcb, 0x91, 0xb8,
	0xff, 0xa9, 0xb5, 0x78, 0x7f, 0x07, 0xf3, 0x23, 0xf7, 0x99, 0xd0, 0xfd, 0xef, 0x52, 0xa8, 0x58,
	0x8e, 0x15, 0x30, 0xa4, 0x5b, 0x71, 0x1f, 0x75, 0xd8, 0x8f, 0x02, 0x35, 0x11, 0x02, 0x94, 0x72,
	0x48, 0x8d, 0xd4, 0xcb, 0xad, 0x73, 0xfe, 0xf3, 0x82, 0x78, 0xce, 0xa4, 0x6b, 0x88, 0x3d, 0x03,
	0xf4, 0x37, 0xe3, 0xcc, 0xd9, 0x7d, 0xfa, 0x5a, 0x4e, 0x56, 0xc1, 0x8e, 0x69, 0x15, 0xe1, 0x1e,
	0x84, 0x86, 0xe1, 0xa2, 0x9c, 0x00, 0x41, 0x48, 0x1c, 0x9a, 0x80, 0x45, 0xdf, 0x99, 0x6f, 0x2c,
	0x2a, 0x30, 0xf7, 0xec, 0x80, 0x6e, 0x00, 0xa2, 0xc4, 0x60, 0x04, 0x4a, 0xf5, 0xef, 0xc0, 0x29,
	0xd4, 0x48, 0x7d, 0xdd, 0xaf, 0xa4, 0xc3, 0x4b, 0x33, 0x6b, 0xbd, 0x11, 0xba, 0x9d, 0x6f, 0x85,
	0xbd, 0x10, 0x5a, 0x32, 0xc9, 0xd8, 0x5f, 0xbe, 0x3f, 0xfb, 0xd4, 0xd5, 0x8b, 0xff, 0x40, 0x99,
	0xf7, 0x72, 0xd7, 0x3a, 0x33, 0x42, 0x0f, 0x43, 0xf9, 0x0b, 0x64, 0x67, 0x37, 0x4f, 0xeb, 0x7e,
	0x6c, 0x77, 0xc9, 0x6d, 0x65, 0xf9, 0x1f, 0x7e, 0x2d, 0x34, 0xae, 0x62, 0x18, 0x5f, 0x5b, 0x66,
	0xba, 0xc5, 0x4f, 0x2c, 0xd3, 0x52, 0xf8, 0x4d, 0x73, 0x50, 0x4a, 0x1d, 0xdb, 0xef, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x0b, 0x59, 0xac, 0xfb, 0x8b, 0x03, 0x00, 0x00,
}
