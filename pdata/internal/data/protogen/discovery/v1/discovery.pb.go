// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opentelemetry/proto/discovery/v1/discovery.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v11 "go.opentelemetry.io/collector/pdata/internal/data/protogen/common/v1"
	v1 "go.opentelemetry.io/collector/pdata/internal/data/protogen/resource/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LogsData represents the logs data that can be stored in a persistent storage,
// OR can be embedded by other protocols that transfer OTLP logs data but do not
// implement the OTLP protocol.
//
// The main difference between this message and collector protocol is that
// in this message there will not be any "control" or "metadata" specific to
// OTLP protocol.
//
// When new fields are added into this message, the OTLP request MUST be updated
// as well.
type DiscoveryData struct {
	// An array of ResourceLogs.
	// For data coming from a single resource this array will typically contain
	// one element. Intermediary nodes that receive data from multiple origins
	// typically batch the data before forwarding further and in that case this
	// array will contain multiple elements.
	ResourceDiscovery    []*ResourceDiscovery `protobuf:"bytes,1,rep,name=resource_discovery,json=resourceDiscovery,proto3" json:"resource_discovery,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DiscoveryData) Reset()         { *m = DiscoveryData{} }
func (m *DiscoveryData) String() string { return proto.CompactTextString(m) }
func (*DiscoveryData) ProtoMessage()    {}
func (*DiscoveryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2fd1e15b8182e1d, []int{0}
}
func (m *DiscoveryData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryData.Unmarshal(m, b)
}
func (m *DiscoveryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryData.Marshal(b, m, deterministic)
}
func (m *DiscoveryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryData.Merge(m, src)
}
func (m *DiscoveryData) XXX_Size() int {
	return xxx_messageInfo_DiscoveryData.Size(m)
}
func (m *DiscoveryData) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryData.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryData proto.InternalMessageInfo

func (m *DiscoveryData) GetResourceDiscovery() []*ResourceDiscovery {
	if m != nil {
		return m.ResourceDiscovery
	}
	return nil
}

// A collection of ScopeLogs from a Resource.
type ResourceDiscovery struct {
	// The resource for the logs in this message.
	// If this field is not set then resource info is unknown.
	Resource *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// A list of ScopeLogs that originate from a resource.
	ScopeDiscovery []*ScopeDiscovery `protobuf:"bytes,2,rep,name=scope_discovery,json=scopeDiscovery,proto3" json:"scope_discovery,omitempty"`
	// The Schema URL, if known. This is the identifier of the Schema that the resource data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	// This schema_url applies to the data in the "resource" field. It does not apply
	// to the data in the "scope_logs" field which have their own schema_url field.
	SchemaUrl            string   `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceDiscovery) Reset()         { *m = ResourceDiscovery{} }
func (m *ResourceDiscovery) String() string { return proto.CompactTextString(m) }
func (*ResourceDiscovery) ProtoMessage()    {}
func (*ResourceDiscovery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2fd1e15b8182e1d, []int{1}
}
func (m *ResourceDiscovery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceDiscovery.Unmarshal(m, b)
}
func (m *ResourceDiscovery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceDiscovery.Marshal(b, m, deterministic)
}
func (m *ResourceDiscovery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceDiscovery.Merge(m, src)
}
func (m *ResourceDiscovery) XXX_Size() int {
	return xxx_messageInfo_ResourceDiscovery.Size(m)
}
func (m *ResourceDiscovery) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceDiscovery.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceDiscovery proto.InternalMessageInfo

func (m *ResourceDiscovery) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceDiscovery) GetScopeDiscovery() []*ScopeDiscovery {
	if m != nil {
		return m.ScopeDiscovery
	}
	return nil
}

func (m *ResourceDiscovery) GetSchemaUrl() string {
	if m != nil {
		return m.SchemaUrl
	}
	return ""
}

// A collection of Logs produced by a Scope.
type ScopeDiscovery struct {
	// The instrumentation scope information for the logs in this message.
	// Semantically when InstrumentationScope isn't set, it is equivalent with
	// an empty instrumentation scope name (unknown).
	Scope *v11.InstrumentationScope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// A list of log records.
	DiscoveryRecords []*DiscoveryRecord `protobuf:"bytes,2,rep,name=discovery_records,json=discoveryRecords,proto3" json:"discovery_records,omitempty"`
	// The Schema URL, if known. This is the identifier of the Schema that the log data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	// This schema_url applies to all logs in the "logs" field.
	SchemaUrl            string   `protobuf:"bytes,3,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScopeDiscovery) Reset()         { *m = ScopeDiscovery{} }
func (m *ScopeDiscovery) String() string { return proto.CompactTextString(m) }
func (*ScopeDiscovery) ProtoMessage()    {}
func (*ScopeDiscovery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2fd1e15b8182e1d, []int{2}
}
func (m *ScopeDiscovery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScopeDiscovery.Unmarshal(m, b)
}
func (m *ScopeDiscovery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScopeDiscovery.Marshal(b, m, deterministic)
}
func (m *ScopeDiscovery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeDiscovery.Merge(m, src)
}
func (m *ScopeDiscovery) XXX_Size() int {
	return xxx_messageInfo_ScopeDiscovery.Size(m)
}
func (m *ScopeDiscovery) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeDiscovery.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeDiscovery proto.InternalMessageInfo

func (m *ScopeDiscovery) GetScope() *v11.InstrumentationScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *ScopeDiscovery) GetDiscoveryRecords() []*DiscoveryRecord {
	if m != nil {
		return m.DiscoveryRecords
	}
	return nil
}

func (m *ScopeDiscovery) GetSchemaUrl() string {
	if m != nil {
		return m.SchemaUrl
	}
	return ""
}

type DiscoveryRecord struct {
	Resource             *v1.Resource `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DiscoveryRecord) Reset()         { *m = DiscoveryRecord{} }
func (m *DiscoveryRecord) String() string { return proto.CompactTextString(m) }
func (*DiscoveryRecord) ProtoMessage()    {}
func (*DiscoveryRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2fd1e15b8182e1d, []int{3}
}
func (m *DiscoveryRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryRecord.Unmarshal(m, b)
}
func (m *DiscoveryRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryRecord.Marshal(b, m, deterministic)
}
func (m *DiscoveryRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryRecord.Merge(m, src)
}
func (m *DiscoveryRecord) XXX_Size() int {
	return xxx_messageInfo_DiscoveryRecord.Size(m)
}
func (m *DiscoveryRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryRecord proto.InternalMessageInfo

func (m *DiscoveryRecord) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func init() {
	proto.RegisterType((*DiscoveryData)(nil), "opentelemetry.proto.discovery.v1.DiscoveryData")
	proto.RegisterType((*ResourceDiscovery)(nil), "opentelemetry.proto.discovery.v1.ResourceDiscovery")
	proto.RegisterType((*ScopeDiscovery)(nil), "opentelemetry.proto.discovery.v1.ScopeDiscovery")
	proto.RegisterType((*DiscoveryRecord)(nil), "opentelemetry.proto.discovery.v1.DiscoveryRecord")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/discovery/v1/discovery.proto", fileDescriptor_e2fd1e15b8182e1d)
}

var fileDescriptor_e2fd1e15b8182e1d = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xdd, 0x6a, 0xc2, 0x30,
	0x1c, 0xc5, 0x89, 0xdf, 0xc6, 0xcd, 0x8f, 0x5c, 0x89, 0x30, 0x28, 0xdd, 0x8d, 0xdb, 0x45, 0xb4,
	0xfa, 0x06, 0xe2, 0x2e, 0xf4, 0x66, 0xd2, 0x7d, 0xc0, 0x76, 0xa1, 0xd4, 0x1a, 0x50, 0xb0, 0x4d,
	0x49, 0x62, 0xc1, 0x57, 0xda, 0x23, 0x8d, 0x3d, 0xc0, 0xf6, 0x16, 0xa3, 0x69, 0x9b, 0xb6, 0xae,
	0xd0, 0x9b, 0xdd, 0x25, 0xff, 0x9c, 0xf3, 0xcb, 0x39, 0x0d, 0x85, 0x63, 0xea, 0x11, 0x57, 0x90,
	0x23, 0x71, 0x88, 0x60, 0xe7, 0x91, 0xc7, 0xa8, 0xa0, 0xa3, 0xdd, 0x81, 0xdb, 0xd4, 0x27, 0xec,
	0x3c, 0xf2, 0x8d, 0x64, 0x83, 0xe5, 0x21, 0xd2, 0x32, 0x8e, 0x70, 0x88, 0x13, 0x91, 0x6f, 0x0c,
	0xee, 0xf3, 0x98, 0x36, 0x75, 0x1c, 0xea, 0x06, 0xc0, 0x70, 0x15, 0x1a, 0x07, 0x38, 0x4f, 0xcb,
	0x08, 0xa7, 0x27, 0x66, 0x93, 0x40, 0x1d, 0xaf, 0x43, 0xbd, 0xce, 0xe1, 0xf5, 0x3c, 0xbe, 0x6b,
	0x6e, 0x09, 0x0b, 0x6d, 0x21, 0x8a, 0x25, 0x1b, 0x95, 0xa2, 0x0f, 0xb4, 0xf2, 0xb0, 0x35, 0x99,
	0xe2, 0xa2, 0xac, 0xd8, 0x8c, 0xbc, 0x0a, 0x6a, 0xf6, 0xd8, 0xe5, 0x48, 0xff, 0x02, 0xb0, 0xf7,
	0x47, 0x88, 0x1e, 0x60, 0x23, 0x96, 0xf6, 0x81, 0x06, 0x86, 0xad, 0xc9, 0x5d, 0xee, 0x7d, 0xaa,
	0x41, 0xea, 0x3a, 0x53, 0x59, 0xd1, 0x1b, 0xec, 0x70, 0x9b, 0x7a, 0xe9, 0xf4, 0x25, 0x99, 0x7e,
	0x5c, 0x9c, 0xfe, 0x29, 0x30, 0x26, 0xd1, 0xdb, 0x3c, 0xb3, 0x47, 0x37, 0x10, 0x72, 0x7b, 0x4f,
	0x1c, 0x6b, 0x73, 0x62, 0xc7, 0x7e, 0x59, 0x03, 0xc3, 0xa6, 0xd9, 0x0c, 0x27, 0x2f, 0xec, 0xb8,
	0xac, 0x35, 0xbe, 0xeb, 0xdd, 0x9f, 0xba, 0xfe, 0x09, 0x60, 0x3b, 0x4b, 0x42, 0x0b, 0x58, 0x95,
	0xac, 0xa8, 0x58, 0xfe, 0x87, 0x8c, 0x1e, 0xd2, 0x37, 0xf0, 0xc2, 0xe5, 0x82, 0x9d, 0x1c, 0xe2,
	0x0a, 0x4b, 0x1c, 0xa8, 0x2b, 0x61, 0x66, 0x48, 0x40, 0x6b, 0xd8, 0x53, 0x99, 0x37, 0x8c, 0xd8,
	0x94, 0xed, 0x78, 0xd4, 0xd0, 0x28, 0x6e, 0x98, 0x94, 0x93, 0x4e, 0xb3, 0xbb, 0xcb, 0x0e, 0x78,
	0x41, 0x49, 0x7d, 0x0d, 0x3b, 0x17, 0x8c, 0x7f, 0x7a, 0xb8, 0x65, 0xa5, 0x51, 0xe9, 0x56, 0x67,
	0x7b, 0x78, 0x7b, 0xa0, 0x85, 0x3d, 0x66, 0x6d, 0x15, 0x62, 0x15, 0x1c, 0xae, 0xc0, 0xfb, 0x55,
	0xfa, 0x2f, 0xfb, 0x28, 0x69, 0x8f, 0x1e, 0x71, 0x9f, 0x15, 0x42, 0xaa, 0x92, 0xf6, 0xf8, 0xd5,
	0xd8, 0xd6, 0x24, 0x76, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x64, 0xb6, 0x75, 0xb3, 0x03,
	0x00, 0x00,
}
