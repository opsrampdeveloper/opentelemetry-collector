// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pdiscovery

import (
	"testing"
	"unsafe"

	"github.com/stretchr/testify/assert"

	"go.opentelemetry.io/collector/pdata/internal"
	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpdiscovery "go.opentelemetry.io/collector/pdata/internal/data/protogen/discovery/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)


func TestResourceDiscovery_MoveTo(t *testing.T) {
	ms := generateTestResourceDiscovery()
	dest := NewResourceDiscovery()
	ms.MoveTo(dest)
	assert.Equal(t, NewResourceDiscovery(), ms)
	assert.Equal(t, generateTestResourceDiscovery(), dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.MoveTo(newResourceDiscovery(&otlpdiscovery.ResourceDiscovery{}, &sharedState)) })
	assert.Panics(t, func() { newResourceDiscovery(&otlpdiscovery.ResourceDiscovery{}, &sharedState).MoveTo(dest) })
}

func TestResourceDiscovery_CopyTo(t *testing.T) {
	ms := NewResourceDiscovery()
	orig := NewResourceDiscovery()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	orig = generateTestResourceDiscovery()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(newResourceDiscovery(&otlpdiscovery.ResourceDiscovery{}, &sharedState)) })
}


func TestResourceDiscovery_Resource(t *testing.T) {
	ms := NewResourceDiscovery()
	internal.FillTestResource(internal.Resource(ms.Resource()))
	assert.Equal(t, pcommon.Resource(internal.GenerateTestResource()), ms.Resource())
}

func TestResourceDiscovery_SchemaUrl(t *testing.T) {
	ms := NewResourceDiscovery()
	assert.Equal(t, "", ms.SchemaUrl())
	ms.SetSchemaUrl("https://opentelemetry.io/schemas/1.5.0")
	assert.Equal(t, "https://opentelemetry.io/schemas/1.5.0", ms.SchemaUrl())
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { newResourceDiscovery(&otlpdiscovery.ResourceDiscovery{}, &sharedState).SetSchemaUrl("https://opentelemetry.io/schemas/1.5.0") })
}

func TestResourceDiscovery_ScopeDiscovery(t *testing.T) {
	ms := NewResourceDiscovery()
	assert.Equal(t, NewScopeDiscoverySlice(), ms.ScopeDiscovery())
	fillTestScopeDiscoverySlice(ms.ScopeDiscovery())
	assert.Equal(t, generateTestScopeDiscoverySlice(), ms.ScopeDiscovery())
}


func generateTestResourceDiscovery() ResourceDiscovery {
	tv := NewResourceDiscovery()
	fillTestResourceDiscovery(tv)
	return tv
}

func fillTestResourceDiscovery(tv ResourceDiscovery) {
	internal.FillTestResource(internal.NewResource(&tv.orig.Resource, tv.state))
		tv.orig.SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestScopeDiscoverySlice(newScopeDiscoverySlice(&tv.orig.ScopeDiscovery, tv.state))
}