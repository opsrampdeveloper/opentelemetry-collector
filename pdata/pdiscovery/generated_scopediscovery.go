// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pdiscovery

import (
	"sort"

	"go.opentelemetry.io/collector/pdata/internal"
	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpdiscovery "go.opentelemetry.io/collector/pdata/internal/data/protogen/discovery/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ScopeDiscovery is a collection of discovery from a LibraryInstrumentation.
//
// This is a reference type, if passed by value and callee modifies it the
// caller will see the modification.
//
// Must use NewScopeDiscovery function to create new instances.
// Important: zero-initialized instance is not valid for use.
type ScopeDiscovery struct {
	orig *otlpdiscovery.ScopeDiscovery
	state *internal.State
}

func newScopeDiscovery(orig *otlpdiscovery.ScopeDiscovery, state *internal.State) ScopeDiscovery {
	return ScopeDiscovery{orig: orig, state: state}
}

// NewScopeDiscovery creates a new empty ScopeDiscovery.
//
// This must be used only in testing code. Users should use "AppendEmpty" when part of a Slice,
// OR directly access the member if this is embedded in another struct.
func NewScopeDiscovery() ScopeDiscovery {
	state := internal.StateMutable
	return newScopeDiscovery(&otlpdiscovery.ScopeDiscovery{}, &state)
}

// MoveTo moves all properties from the current struct overriding the destination and
// resetting the current instance to its zero value
func (ms ScopeDiscovery) MoveTo(dest ScopeDiscovery) {
	ms.state.AssertMutable()
	dest.state.AssertMutable()
	*dest.orig = *ms.orig
	*ms.orig = otlpdiscovery.ScopeDiscovery{}
}



// Scope returns the scope associated with this ScopeDiscovery.
func (ms ScopeDiscovery) Scope() pcommon.InstrumentationScope {
	return pcommon.InstrumentationScope(internal.NewInstrumentationScope(&ms.orig.Scope, ms.state))
}
// SchemaUrl returns the schemaurl associated with this ScopeDiscovery.
func (ms ScopeDiscovery) SchemaUrl() string {
	return ms.orig.SchemaUrl
}

// SetSchemaUrl replaces the schemaurl associated with this ScopeDiscovery.
func (ms ScopeDiscovery) SetSchemaUrl(v string) {
	ms.state.AssertMutable()
	ms.orig.SchemaUrl = v
}
// DiscoveryRecords returns the DiscoveryRecords associated with this ScopeDiscovery.
func (ms ScopeDiscovery) DiscoveryRecords() DiscoveryRecordSlice {
	return newDiscoveryRecordSlice(&ms.orig.DiscoveryRecords, ms.state)
}


// CopyTo copies all properties from the current struct overriding the destination.
func (ms ScopeDiscovery) CopyTo(dest ScopeDiscovery) {
	dest.state.AssertMutable()
		ms.Scope().CopyTo(dest.Scope())
		dest.SetSchemaUrl(ms.SchemaUrl())
		ms.DiscoveryRecords().CopyTo(dest.DiscoveryRecords())
}
