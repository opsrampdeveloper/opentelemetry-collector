// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by "pdata/internal/cmd/pdatagen/main.go". DO NOT EDIT.
// To regenerate this file run "make genpdata".

package pdiscovery

import (
	"testing"
	"unsafe"

	"github.com/stretchr/testify/assert"

	"go.opentelemetry.io/collector/pdata/internal"
	"go.opentelemetry.io/collector/pdata/internal/data"
	otlpdiscovery "go.opentelemetry.io/collector/pdata/internal/data/protogen/discovery/v1"
	"go.opentelemetry.io/collector/pdata/pcommon"
)


func TestScopeDiscovery_MoveTo(t *testing.T) {
	ms := generateTestScopeDiscovery()
	dest := NewScopeDiscovery()
	ms.MoveTo(dest)
	assert.Equal(t, NewScopeDiscovery(), ms)
	assert.Equal(t, generateTestScopeDiscovery(), dest)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.MoveTo(newScopeDiscovery(&otlpdiscovery.ScopeDiscovery{}, &sharedState)) })
	assert.Panics(t, func() { newScopeDiscovery(&otlpdiscovery.ScopeDiscovery{}, &sharedState).MoveTo(dest) })
}

func TestScopeDiscovery_CopyTo(t *testing.T) {
	ms := NewScopeDiscovery()
	orig := NewScopeDiscovery()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	orig = generateTestScopeDiscovery()
	orig.CopyTo(ms)
	assert.Equal(t, orig, ms)
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { ms.CopyTo(newScopeDiscovery(&otlpdiscovery.ScopeDiscovery{}, &sharedState)) })
}


func TestScopeDiscovery_Scope(t *testing.T) {
	ms := NewScopeDiscovery()
	internal.FillTestInstrumentationScope(internal.InstrumentationScope(ms.Scope()))
	assert.Equal(t, pcommon.InstrumentationScope(internal.GenerateTestInstrumentationScope()), ms.Scope())
}

func TestScopeDiscovery_SchemaUrl(t *testing.T) {
	ms := NewScopeDiscovery()
	assert.Equal(t, "", ms.SchemaUrl())
	ms.SetSchemaUrl("https://opentelemetry.io/schemas/1.5.0")
	assert.Equal(t, "https://opentelemetry.io/schemas/1.5.0", ms.SchemaUrl())
	sharedState := internal.StateReadOnly
	assert.Panics(t, func() { newScopeDiscovery(&otlpdiscovery.ScopeDiscovery{}, &sharedState).SetSchemaUrl("https://opentelemetry.io/schemas/1.5.0") })
}

func TestScopeDiscovery_DiscoveryRecords(t *testing.T) {
	ms := NewScopeDiscovery()
	assert.Equal(t, NewDiscoveryRecordSlice(), ms.DiscoveryRecords())
	fillTestDiscoveryRecordSlice(ms.DiscoveryRecords())
	assert.Equal(t, generateTestDiscoveryRecordSlice(), ms.DiscoveryRecords())
}


func generateTestScopeDiscovery() ScopeDiscovery {
	tv := NewScopeDiscovery()
	fillTestScopeDiscovery(tv)
	return tv
}

func fillTestScopeDiscovery(tv ScopeDiscovery) {
	internal.FillTestInstrumentationScope(internal.NewInstrumentationScope(&tv.orig.Scope, tv.state))
		tv.orig.SchemaUrl = "https://opentelemetry.io/schemas/1.5.0"
	fillTestDiscoveryRecordSlice(newDiscoveryRecordSlice(&tv.orig.DiscoveryRecords, tv.state))
}